# Zero-Downtime Migration Strategy
# Blue-green migration infrastructure with automatic rollback capabilities

version: "3.8"

services:
  # Blue Environment (Current Production)
  postgres-blue:
    image: postgres:15
    container_name: postgres-blue
    environment:
      POSTGRES_DB: sav3
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_ADMIN_PASSWORD:-postgres}
      PGUSER: postgres
    volumes:
      - postgres_blue_data:/var/lib/postgresql/data
      - ./docker/postgres/migration-init:/docker-entrypoint-initdb.d
      - ./docker/postgres/security-config/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./docker/postgres/security-config/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - /etc/ssl/certs:/etc/ssl/certs:ro
    ports:
      - "10001:5432"
    networks:
      - migration-network
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c hba_file=/etc/postgresql/pg_hba.conf
      -c log_statement=all
      -c log_min_duration_statement=0
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -p 5432 -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Green Environment (Migration Target)
  postgres-green:
    image: postgres:15
    container_name: postgres-green
    environment:
      POSTGRES_DB: sav3
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_ADMIN_PASSWORD:-postgres}
      PGUSER: postgres
    volumes:
      - postgres_green_data:/var/lib/postgresql/data
      - ./docker/postgres/migration-init:/docker-entrypoint-initdb.d
      - ./docker/postgres/security-config/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./docker/postgres/security-config/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - /etc/ssl/certs:/etc/ssl/certs:ro
    ports:
      - "10002:5432"
    networks:
      - migration-network
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c hba_file=/etc/postgresql/pg_hba.conf
      -c log_statement=all
      -c log_min_duration_statement=0
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -p 5432 -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Migration Controller
  migration-controller:
    build:
      context: ./docker/migration-controller
      dockerfile: Dockerfile
    container_name: migration-controller
    environment:
      BLUE_DATABASE_URL: postgresql://postgres:${DB_ADMIN_PASSWORD:-postgres}@postgres-blue:5432/sav3
      GREEN_DATABASE_URL: postgresql://postgres:${DB_ADMIN_PASSWORD:-postgres}@postgres-green:5432/sav3
      MIGRATION_MODE: ${MIGRATION_MODE:-blue-green}
      ROLLBACK_ENABLED: ${ROLLBACK_ENABLED:-true}
      MAX_DOWNTIME_SECONDS: ${MAX_DOWNTIME_SECONDS:-30}
      VALIDATION_TIMEOUT_SECONDS: ${VALIDATION_TIMEOUT_SECONDS:-300}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - ./prisma:/app/prisma
      - ./src:/app/src
      - ./scripts/migrations:/app/scripts
      - migration_logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - migration-network
    depends_on:
      postgres-blue:
        condition: service_healthy
      postgres-green:
        condition: service_healthy
    ports:
      - "10040:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Load Balancer for Blue-Green Switching
  migration-proxy:
    image: nginx:alpine
    container_name: migration-proxy
    volumes:
      - ./docker/migration-proxy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/migration-proxy/upstream.conf:/etc/nginx/conf.d/upstream.conf:ro
      - migration_logs:/var/log/nginx
    ports:
      - "10003:5432"
    networks:
      - migration-network
    depends_on:
      - postgres-blue
      - postgres-green
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Schema Validator
  schema-validator:
    build:
      context: ./docker/schema-validator
      dockerfile: Dockerfile
    container_name: schema-validator
    environment:
      BLUE_DATABASE_URL: postgresql://postgres:${DB_ADMIN_PASSWORD:-postgres}@postgres-blue:5432/sav3
      GREEN_DATABASE_URL: postgresql://postgres:${DB_ADMIN_PASSWORD:-postgres}@postgres-green:5432/sav3
      VALIDATION_MODE: ${VALIDATION_MODE:-strict}
      SCHEMA_DRIFT_THRESHOLD: ${SCHEMA_DRIFT_THRESHOLD:-0.1}
    volumes:
      - ./prisma:/app/prisma
      - ./scripts/schema-validation:/app/scripts
      - migration_logs:/app/logs
    networks:
      - migration-network
    depends_on:
      postgres-blue:
        condition: service_healthy
      postgres-green:
        condition: service_healthy

volumes:
  postgres_blue_data:
    driver: local
  postgres_green_data:
    driver: local
  migration_logs:
    driver: local

networks:
  migration-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
