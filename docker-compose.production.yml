# ===========================================
# PRODUCTION DOCKER COMPOSE - APHILA.IO
# ===========================================
# Complete production stack with Traefik, SSL, and monitoring

version: "3.8"

# ===========================================
# NETWORKS
# ===========================================
networks:
  sav3-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ===========================================
# VOLUMES
# ===========================================
volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  minio_data_prod:
    driver: local
  prometheus_data_prod:
    driver: local
  grafana_data_prod:
    driver: local

# ===========================================
# SERVICES CONFIGURATION
# ===========================================
services:
  # ===========================================
  # TRAEFIK REVERSE PROXY & LOAD BALANCER
  # ===========================================
  traefik:
    image: traefik:v3.0
    container_name: sav3_traefik
    restart: unless-stopped
    command:
      - --configFile=/etc/traefik/traefik.yml
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" # Traefik dashboard (secure with auth)
    volumes:
      - ./docker/traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./docker/traefik/dynamic.yml:/etc/traefik/dynamic.yml:ro
      - ./docker/traefik/acme:/letsencrypt
      - ./logs/traefik:/var/log/traefik
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - TRAEFIK_API_DASHBOARD=true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.aphila.io`)"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.service=api@internal"
    networks:
      - sav3-network
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 40s

  # ===========================================
  # POSTGRESQL DATABASE
  # ===========================================
  db:
    image: postgres:16-alpine
    container_name: sav3_postgres_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./logs/postgres:/var/log
    ports:
      - "5432:5432"
    networks:
      - sav3-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # ===========================================
  # PGBOUNCER CONNECTION POOLER
  # ===========================================
  pgbouncer:
    image: pgbouncer/pgbouncer:latest
    container_name: sav3_pgbouncer_prod
    restart: unless-stopped
    environment:
      DATABASES_HOST: db
      DATABASES_PORT: 5432
      DATABASES_USER: ${POSTGRES_USER}
      DATABASES_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASES_DBNAME: ${POSTGRES_DB}
      POOL_MODE: transaction
      SERVER_RESET_QUERY: DISCARD ALL
      MAX_CLIENT_CONN: 100
      DEFAULT_POOL_SIZE: 20
      MAX_DB_CONNECTIONS: 50
    ports:
      - "6432:6432"
    networks:
      - sav3-network
    depends_on:
      db:
        condition: service_healthy

  # ===========================================
  # REDIS CACHE & SESSIONS
  # ===========================================
  redis:
    image: redis:7-alpine
    container_name: sav3_redis_prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-sav3_redis_prod}
    volumes:
      - redis_data_prod:/data
      - ./logs/redis:/var/log/redis
    ports:
      - "6379:6379"
    networks:
      - sav3-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # ===========================================
  # MINIO OBJECT STORAGE (S3-COMPATIBLE)
  # ===========================================
  minio:
    image: minio/minio:latest
    container_name: sav3_minio_prod
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BROWSER_REDIRECT_URL: https://minio.aphila.io
      MINIO_SERVER_URL: https://minio.aphila.io
    volumes:
      - minio_data_prod:/data
      - ./logs/minio:/var/log/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    networks:
      - sav3-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.minio-api.rule=Host(`minio.aphila.io`)"
      - "traefik.http.routers.minio-api.tls=true"
      - "traefik.http.routers.minio-api.tls.certresolver=letsencrypt"
      - "traefik.http.routers.minio-api.service=minio-api"
      - "traefik.http.services.minio-api.loadbalancer.server.port=9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # ===========================================
  # MINIO BUCKET INITIALIZATION
  # ===========================================
  minio-init:
    image: minio/mc:latest
    container_name: sav3_minio_init
    restart: "no"
    depends_on:
      minio:
        condition: service_healthy
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    networks:
      - sav3-network
    entrypoint: /bin/sh
    command: -c "/docker/minio-init/init-buckets.sh"
    volumes:
      - ./docker/minio-init/init-buckets.sh:/docker/minio-init/init-buckets.sh:ro

  # ===========================================
  # SAV3 API SERVER
  # ===========================================
  api:
    build:
      context: .
      target: production
    image: sav3-api:latest
    container_name: sav3_api_prod
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pgbouncer:6432/${POSTGRES_DB}
    volumes:
      - ./uploads:/app/uploads
      - ./logs/api:/var/log/sav3
    ports:
      - "4000:4000"
    networks:
      - sav3-network
    depends_on:
      pgbouncer:
        condition: service_started
      redis:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.aphila.io`)"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
      - "traefik.http.services.api.loadbalancer.server.port=4000"
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:4000/api/v1/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ===========================================
  # PROMETHEUS MONITORING
  # ===========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: sav3_prometheus_prod
    restart: unless-stopped
    volumes:
      - ./docker/prometheus:/etc/prometheus
      - prometheus_data_prod:/prometheus
      - ./logs/prometheus:/var/log/prometheus
    ports:
      - "9090:9090"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    networks:
      - sav3-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:9090/-/healthy",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # GRAFANA DASHBOARD
  # ===========================================
  grafana:
    image: grafana/grafana:latest
    container_name: sav3_grafana_prod
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SERVER_DOMAIN: grafana.aphila.io
      GF_SERVER_ROOT_URL: https://grafana.aphila.io
    volumes:
      - grafana_data_prod:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./logs/grafana:/var/log/grafana
    ports:
      - "3000:3000"
    networks:
      - sav3-network
    depends_on:
      prometheus:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.aphila.io`)"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # POSTGRES EXPORTER (Prometheus)
  # ===========================================
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: sav3_postgres_exporter
    restart: unless-stopped
    environment:
      DATA_SOURCE_NAME: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable
    ports:
      - "9187:9187"
    networks:
      - sav3-network
    depends_on:
      db:
        condition: service_healthy

  # ===========================================
  # REDIS EXPORTER (Prometheus)
  # ===========================================
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: sav3_redis_exporter
    restart: unless-stopped
    environment:
      REDIS_ADDR: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-sav3_redis_prod}
    ports:
      - "9121:9121"
    networks:
      - sav3-network
    depends_on:
      redis:
        condition: service_healthy

  # ===========================================
  # NODE EXPORTER (System Metrics)
  # ===========================================
  node-exporter:
    image: prom/node-exporter:latest
    container_name: sav3_node_exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    ports:
      - "9100:9100"
    networks:
      - sav3-network
