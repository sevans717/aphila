version: "3.8"

services:
  # PostgreSQL Exporter for Prometheus (connects to existing DB)
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    restart: unless-stopped
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@host.docker.internal:10000/${POSTGRES_DB:-sav3}?sslmode=disable"
      PG_EXPORTER_EXTEND_QUERY_PATH: /etc/postgres_exporter/queries.yaml
      PG_EXPORTER_DISABLE_DEFAULT_METRICS: false
      PG_EXPORTER_DISABLE_SETTINGS_METRICS: false
      # Custom metrics configuration
      PG_EXPORTER_AUTO_DISCOVER_DATABASES: true
      PG_EXPORTER_INCLUDE_DATABASES: ${POSTGRES_DB:-sav3}
    volumes:
      - ./docker/postgres-exporter/queries.yaml:/etc/postgres_exporter/queries.yaml:ro
    ports:
      - "10020:9187"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget -q --spider http://localhost:9187/metrics || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - monitoring_network

  # PgBouncer Exporter (disabled - PgBouncer not currently running)
  # pgbouncer-exporter:
  #   image: prometheuscommunity/pgbouncer-exporter:v0.7.0
  #   restart: unless-stopped
  #   environment:
  #     PGBOUNCER_EXPORTER_HOST: host.docker.internal
  #     PGBOUNCER_EXPORTER_PORT: 6432
  #     PGBOUNCER_EXPORTER_USER: ${POSTGRES_USER:-postgres}
  #     PGBOUNCER_EXPORTER_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
  #     PGBOUNCER_EXPORTER_DATABASE: pgbouncer
  #   ports:
  #     - "10021:9127"
  #   networks:
  #     - monitoring_network

  # Prometheus
  prometheus:
    image: prom/prometheus:v2.47.0
    restart: unless-stopped
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=30d"
      - "--storage.tsdb.retention.size=10GB"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
      - "--web.enable-admin-api"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./docker/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    ports:
      - "10022:9090"
    depends_on:
      - postgres-exporter
    networks:
      - monitoring_network

  # Grafana
  grafana:
    image: grafana/grafana:10.2.0
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_USERS_ALLOW_ORG_CREATE: false
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-polystat-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "10023:3000"
    depends_on:
      - prometheus
    networks:
      - monitoring_network

  # AlertManager
  alertmanager:
    image: prom/alertmanager:v0.26.0
    restart: unless-stopped
    command:
      - "--config.file=/etc/alertmanager/alertmanager.yml"
      - "--storage.path=/alertmanager"
      - "--web.external-url=http://localhost:9093"
    volumes:
      - ./docker/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    ports:
      - "10024:9093"
    networks:
      - monitoring_network

  # Node Exporter (system metrics)
  node-exporter:
    image: prom/node-exporter:v1.6.1
    restart: unless-stopped
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--path.rootfs=/host"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/host:ro
    ports:
      - "10025:9100"
    networks:
      - monitoring_network

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
  alertmanager_data:

networks:
  monitoring_network:
    driver: bridge
