import pino from 'pino';
declare const logger: {
    error: (message: string, ...args: any[]) => void;
    warn: (message: string, ...args: any[]) => void;
    info: (message: string, ...args: any[]) => void;
    debug: (message: string, ...args: any[]) => void;
    level: pino.LevelWithSilentOrString;
    fatal: pino.LogFn;
    trace: pino.LogFn;
    silent: pino.LogFn;
    msgPrefix: string | undefined;
    version: string;
    levels: pino.LevelMapping;
    useLevelLabels: boolean;
    levelVal: number;
    child<ChildCustomLevels extends string = never>(bindings: pino.Bindings, options?: pino.ChildLoggerOptions<ChildCustomLevels> | undefined): pino.Logger<ChildCustomLevels, boolean>;
    onChild: (child: pino.Logger<never, boolean>) => void;
    on(event: "level-change", listener: pino.LevelChangeEventListener<never, boolean>): pino.Logger<never, boolean>;
    addListener(event: "level-change", listener: pino.LevelChangeEventListener<never, boolean>): pino.Logger<never, boolean>;
    once(event: "level-change", listener: pino.LevelChangeEventListener<never, boolean>): pino.Logger<never, boolean>;
    prependListener(event: "level-change", listener: pino.LevelChangeEventListener<never, boolean>): pino.Logger<never, boolean>;
    prependOnceListener(event: "level-change", listener: pino.LevelChangeEventListener<never, boolean>): pino.Logger<never, boolean>;
    removeListener(event: "level-change", listener: pino.LevelChangeEventListener<never, boolean>): pino.Logger<never, boolean>;
    isLevelEnabled(level: pino.LevelWithSilentOrString): boolean;
    bindings(): pino.Bindings;
    setBindings(bindings: pino.Bindings): void;
    flush(cb?: (err?: Error) => void): void;
    off<K>(eventName: string | symbol, listener: (...args: any[]) => void): pino.Logger<never, boolean>;
    removeAllListeners(eventName?: string | symbol | undefined): pino.Logger<never, boolean>;
    setMaxListeners(n: number): pino.Logger<never, boolean>;
    getMaxListeners(): number;
    listeners<K>(eventName: string | symbol): Function[];
    rawListeners<K>(eventName: string | symbol): Function[];
    emit<K>(eventName: string | symbol, ...args: any[]): boolean;
    listenerCount<K>(eventName: string | symbol, listener?: Function | undefined): number;
    eventNames(): (string | symbol)[];
    customLevels: {};
    useOnlyCustomLevels: boolean;
};
export { logger };
//# sourceMappingURL=logger.d.ts.map