# Nginx Configuration for Migration Proxy
# Routes database traffic between blue and green environments

events {
    worker_connections 1024;
}

stream {
    # Upstream configuration for PostgreSQL
    upstream postgres_backend {
        server postgres-blue:5432 max_fails=3 fail_timeout=30s;
        # server postgres-green:5432 backup; # Uncomment during green deployment
    }

    # Logging
    error_log /var/log/nginx/error.log warn;
    access_log /var/log/nginx/access.log;

    # PostgreSQL proxy
    server {
        listen 5432;
        proxy_pass postgres_backend;
        proxy_timeout 10s;
        proxy_connect_timeout 3s;
        proxy_responses 1;

        # Health check
        health_check interval=10s passes=2 fails=3;
        health_check_timeout 5s;
    }
}

http {
    # Basic HTTP configuration for health checks
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/http_access.log main;
    error_log /var/log/nginx/http_error.log;

    # Health check endpoint
    server {
        listen 8080;

        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        location /status {
            access_log off;
            return 200 '{"status":"active","upstream":"postgres_backend","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }
    }
}
