version: "3.8"

services:
  # Development Database (Alternative to main DB for development experiments)
  dev-db:
    image: postgis/postgis:16-3.4
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dev_password}
      POSTGRES_USER: ${POSTGRES_USER:-dev_user}
      POSTGRES_DB: ${POSTGRES_DB:-sav3_dev}
    ports:
      - "10060:5432"
    volumes:
      - dev-db-data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
      - ./docker/postgres/init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-dev_user}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - dev-network

  # Development API (Alternative/hot-reload version)
  dev-api:
    build: .
    depends_on:
      dev-db:
        condition: service_healthy
    environment:
      DATABASE_URL: "postgresql://dev_user:dev_password@dev-db:5432/sav3_dev"
      JWT_SECRET: ${JWT_SECRET:-dev_jwt_secret}
      PORT: 4000
      NODE_ENV: development
    ports:
      - "10061:4000"
    volumes:
      - ./:/usr/src/app
    command: sh -c "npm run dev"
    networks:
      - dev-network

  # Hot Reload Server (For frontend development)
  hot-reload:
    image: node:18-alpine
    restart: unless-stopped
    working_dir: /app
    environment:
      NODE_ENV: development
    ports:
      - "10062:3000"
    volumes:
      - ./sav3-frontend:/app
    command: sh -c "npm install && npm run dev"
    networks:
      - dev-network

  # Development Proxy (Reverse proxy for local development)
  dev-proxy:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "10063:80"
    volumes:
      - ./docker/dev-proxy/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - dev-api
      - hot-reload
    networks:
      - dev-network

  # Debug Server (Remote debugging)
  debug-server:
    image: node:18-alpine
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DEBUG_PORT: 9229
    ports:
      - "10064:9229"
    volumes:
      - ./:/usr/src/app
    command: sh -c "npm run debug"
    networks:
      - dev-network

  # IDE Integration/Debug Server
  ide-debug:
    image: node:18-alpine
    restart: unless-stopped
    environment:
      NODE_ENV: development
    ports:
      - "10065:3001"
    volumes:
      - ./:/usr/src/app
    command: sh -c "npm run ide-debug"
    networks:
      - dev-network

  # Local Redis (Development)
  dev-redis:
    image: redis:7.2-alpine
    restart: unless-stopped
    ports:
      - "10066:6379"
    volumes:
      - dev-redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - dev-network

  # Local MinIO (Development S3)
  dev-minio:
    image: minio/minio:RELEASE.2024-08-17T01-24-54Z
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-dev_minio}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-dev_minio_password}
    ports:
      - "10067:9000"
      - "10067:9001" # MinIO Console on same port +1
    volumes:
      - dev-minio-data:/data
    command: server /data --console-address ":9001"
    networks:
      - dev-network

  # Development Monitoring
  dev-monitoring:
    image: prom/prometheus:v2.47.0
    restart: unless-stopped
    ports:
      - "10068:9090"
    volumes:
      - ./docker/dev-monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - dev-prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
    networks:
      - dev-network

  # Log Aggregation (Development)
  dev-logging:
    image: grafana/loki:2.9.0
    restart: unless-stopped
    ports:
      - "10069:3100"
    volumes:
      - dev-loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - dev-network

  # Development Mail Server
  dev-mail:
    image: mailhog/mailhog:latest
    restart: unless-stopped
    ports:
      - "10070:1025" # SMTP
      - "10070:8025" # Web UI (same port +1)
    networks:
      - dev-network

  # Development SMS Service
  dev-sms:
    image: node:18-alpine
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3000
    ports:
      - "10071:3000"
    volumes:
      - ./docker/dev-sms:/usr/src/app
    command: sh -c "npm install && npm start"
    networks:
      - dev-network

  # Development Push Notification
  dev-push:
    image: node:18-alpine
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3000
    ports:
      - "10072:3000"
    volumes:
      - ./docker/dev-push:/usr/src/app
    command: sh -c "npm install && npm start"
    networks:
      - dev-network

  # Development Analytics
  dev-analytics:
    image: node:18-alpine
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3000
    ports:
      - "10073:3000"
    volumes:
      - ./docker/dev-analytics:/usr/src/app
    command: sh -c "npm install && npm start"
    networks:
      - dev-network

  # Development CDN
  dev-cdn:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "10074:80"
    volumes:
      - ./docker/dev-cdn/nginx.conf:/etc/nginx/nginx.conf:ro
      - dev-cdn-assets:/usr/share/nginx/html
    networks:
      - dev-network

  # Development Backup
  dev-backup:
    image: postgres:16
    restart: "no"
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD:-dev_password}
    ports:
      - "10075:5432"
    volumes:
      - dev-backup-data:/backups
    command: sh -c "pg_dump -h dev-db -U dev_user -d sav3_dev -f /backups/dev-backup-$(date +%F_%T).dump"
    depends_on:
      - dev-db
    networks:
      - dev-network

  # Development Security
  dev-security:
    image: vault:1.15.2
    restart: unless-stopped
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_ROOT_TOKEN:-dev-root-token}
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    ports:
      - "10076:8200"
    volumes:
      - dev-vault-data:/vault/data
    cap_add:
      - IPC_LOCK
    networks:
      - dev-network

  # Development Media
  dev-media:
    image: node:18-alpine
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3000
    ports:
      - "10077:3000"
    volumes:
      - ./docker/dev-media:/usr/src/app
    command: sh -c "npm install && npm start"
    networks:
      - dev-network

  # Development Search
  dev-search:
    image: elasticsearch:8.11.0
    restart: unless-stopped
    environment:
      discovery.type: single-node
      xpack.security.enabled: false
      "ES_JAVA_OPTS": "-Xms512m -Xmx512m"
    ports:
      - "10078:9200"
    volumes:
      - dev-elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - dev-network

  # Development Cache
  dev-cache:
    image: memcached:1.6-alpine
    restart: unless-stopped
    ports:
      - "10079:11211"
    networks:
      - dev-network

volumes:
  dev-db-data:
  dev-redis-data:
  dev-minio-data:
  dev-prometheus-data:
  dev-loki-data:
  dev-cdn-assets:
  dev-backup-data:
  dev-vault-data:
  dev-elasticsearch-data:

networks:
  dev-network:
    driver: bridge
