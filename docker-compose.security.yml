version: "3.8"

services:
  # Secure PostgreSQL Primary with TLS
  postgres-primary-secure:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_USER: postgres
      POSTGRES_DB: ${POSTGRES_DB:-sav3}
      # Security settings
      POSTGRES_INITDB_ARGS: "--auth-host=md5 --auth-local=peer"
    volumes:
      - postgres_data_secure:/var/lib/postgresql/data
      - ./docker/postgres/security-init:/docker-entrypoint-initdb.d
      - ./docker/postgres/ssl-certs:/var/lib/postgresql/ssl:ro
      - ./docker/postgres/security-config/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./docker/postgres/security-config/pg_hba.conf:/var/lib/postgresql/data/pg_hba.conf
    command: |
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c ssl=on
      -c ssl_cert_file=/var/lib/postgresql/ssl/server.crt
      -c ssl_key_file=/var/lib/postgresql/ssl/server.key
      -c ssl_ca_file=/var/lib/postgresql/ssl/ca.crt
      -c shared_preload_libraries='pg_stat_statements'
    secrets:
      - postgres_password
    ports:
      - "10000:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ${POSTGRES_DB:-sav3}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - secure_network

  # Secure PostgreSQL Replica with TLS
  postgres-replica-secure:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_USER: postgres
      POSTGRES_DB: ${POSTGRES_DB:-sav3}
      PGUSER: postgres
      # Replication settings
      POSTGRES_PRIMARY_HOST: postgres-primary-secure
      POSTGRES_PRIMARY_PORT: 5432
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD_FILE: /run/secrets/replication_password
    volumes:
      - postgres_replica_data_secure:/var/lib/postgresql/data
      - ./docker/postgres/ssl-certs:/var/lib/postgresql/ssl:ro
      - ./docker/postgres/security-config/postgresql-replica.conf:/etc/postgresql/postgresql.conf
      - ./scripts/secure-replica-entrypoint.sh:/docker-entrypoint-initdb.d/secure-replica-entrypoint.sh
    command: |
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c ssl=on
      -c ssl_cert_file=/var/lib/postgresql/ssl/server.crt
      -c ssl_key_file=/var/lib/postgresql/ssl/server.key
      -c ssl_ca_file=/var/lib/postgresql/ssl/ca.crt
    secrets:
      - postgres_password
      - replication_password
    depends_on:
      postgres-primary-secure:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ${POSTGRES_DB:-sav3}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - secure_network

  # Secure PgBouncer with TLS
  pgbouncer-secure:
    image: pgbouncer/pgbouncer:1.21.0
    restart: unless-stopped
    environment:
      DATABASES_HOST: postgres-primary-secure
      DATABASES_PORT: 5432
      DATABASES_USER: postgres
      DATABASES_PASSWORD_FILE: /run/secrets/postgres_password
      DATABASES_DBNAME: ${POSTGRES_DB:-sav3}
      POOL_MODE: transaction
      SERVER_TLS_SSLMODE: require
      CLIENT_TLS_SSLMODE: prefer
    volumes:
      - ./pgbouncer/pgbouncer-secure.ini:/etc/pgbouncer/pgbouncer.ini:ro
      - ./pgbouncer/userlist-secure.txt:/etc/pgbouncer/userlist.txt:ro
      - ./docker/postgres/ssl-certs:/etc/ssl/certs:ro
    secrets:
      - postgres_password
    ports:
      - "10002:6432"
    depends_on:
      - postgres-primary-secure
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -h localhost -p 6432 -U postgres -d ${POSTGRES_DB:-sav3}",
        ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - secure_network

  # Secrets Manager (HashiCorp Vault)
  vault:
    image: vault:1.15.2
    restart: unless-stopped
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_ROOT_TOKEN:-dev-root-token}
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
      VAULT_API_ADDR: http://localhost:8200
    volumes:
      - vault_data:/vault/data
      - ./docker/vault/config:/vault/config
      - ./docker/vault/init:/vault/init
    ports:
      - "10035:8200"
    cap_add:
      - IPC_LOCK
    healthcheck:
      test: ["CMD-SHELL", "vault status || exit 0"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - secure_network

  # Vault Agent for Secret Rotation
  vault-agent:
    image: vault:1.15.2
    restart: unless-stopped
    environment:
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN: ${VAULT_ROOT_TOKEN:-dev-root-token}
    volumes:
      - ./docker/vault-agent/config:/vault/config
      - ./docker/vault-agent/templates:/vault/templates
      - vault_secrets:/vault/secrets
    command: |
      sh -c "
      until vault status; do sleep 2; done &&
      vault agent -config=/vault/config/agent.hcl
      "
    depends_on:
      vault:
        condition: service_healthy
    networks:
      - secure_network

  # Certificate Management (Certbot for Let's Encrypt or internal CA)
  cert-manager:
    build:
      context: ./docker/cert-manager
      dockerfile: Dockerfile
    restart: unless-stopped
    volumes:
      - ./docker/postgres/ssl-certs:/certs
      - cert_manager_data:/var/lib/cert-manager
    environment:
      CERT_DOMAIN: ${CERT_DOMAIN:-localhost}
      CERT_EMAIL: ${CERT_EMAIL:-admin@localhost}
    networks:
      - secure_network

volumes:
  postgres_data_secure:
  postgres_replica_data_secure:
  vault_data:
  vault_secrets:
  cert_manager_data:

secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  replication_password:
    file: ./secrets/replication_password.txt

networks:
  secure_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
